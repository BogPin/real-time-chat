// Code generated by MockGen. DO NOT EDIT.
// Source: models/chat.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/BogPin/real-time-chat/backend/api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIChatStorer is a mock of IChatStorer interface.
type MockIChatStorer struct {
	ctrl     *gomock.Controller
	recorder *MockIChatStorerMockRecorder
}

// MockIChatStorerMockRecorder is the mock recorder for MockIChatStorer.
type MockIChatStorerMockRecorder struct {
	mock *MockIChatStorer
}

// NewMockIChatStorer creates a new mock instance.
func NewMockIChatStorer(ctrl *gomock.Controller) *MockIChatStorer {
	mock := &MockIChatStorer{ctrl: ctrl}
	mock.recorder = &MockIChatStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatStorer) EXPECT() *MockIChatStorerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockIChatStorer) Begin() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockIChatStorerMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockIChatStorer)(nil).Begin))
}

// Create mocks base method.
func (m *MockIChatStorer) Create(dto models.ChatDTO) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dto)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIChatStorerMockRecorder) Create(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIChatStorer)(nil).Create), dto)
}

// CreateInTx mocks base method.
func (m *MockIChatStorer) CreateInTx(tx *sql.Tx, dto models.ChatDTO) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInTx", tx, dto)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInTx indicates an expected call of CreateInTx.
func (mr *MockIChatStorerMockRecorder) CreateInTx(tx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInTx", reflect.TypeOf((*MockIChatStorer)(nil).CreateInTx), tx, dto)
}

// Delete mocks base method.
func (m *MockIChatStorer) Delete(id int) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIChatStorerMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIChatStorer)(nil).Delete), id)
}

// GetOne mocks base method.
func (m *MockIChatStorer) GetOne(id int) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIChatStorerMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIChatStorer)(nil).GetOne), id)
}

// GetUserChats mocks base method.
func (m *MockIChatStorer) GetUserChats(userId int) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", userId)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockIChatStorerMockRecorder) GetUserChats(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockIChatStorer)(nil).GetUserChats), userId)
}

// Update mocks base method.
func (m *MockIChatStorer) Update(chat models.Chat) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", chat)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIChatStorerMockRecorder) Update(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIChatStorer)(nil).Update), chat)
}
