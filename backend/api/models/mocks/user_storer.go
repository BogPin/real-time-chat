// Code generated by MockGen. DO NOT EDIT.
// Source: models/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/BogPin/real-time-chat/backend/api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserStorer is a mock of IUserStorer interface.
type MockIUserStorer struct {
	ctrl     *gomock.Controller
	recorder *MockIUserStorerMockRecorder
}

// MockIUserStorerMockRecorder is the mock recorder for MockIUserStorer.
type MockIUserStorerMockRecorder struct {
	mock *MockIUserStorer
}

// NewMockIUserStorer creates a new mock instance.
func NewMockIUserStorer(ctrl *gomock.Controller) *MockIUserStorer {
	mock := &MockIUserStorer{ctrl: ctrl}
	mock.recorder = &MockIUserStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserStorer) EXPECT() *MockIUserStorerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIUserStorer) Delete(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserStorerMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserStorer)(nil).Delete), id)
}

// GetOne mocks base method.
func (m *MockIUserStorer) GetOne(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIUserStorerMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIUserStorer)(nil).GetOne), id)
}

// Update mocks base method.
func (m *MockIUserStorer) Update(user models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUserStorerMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserStorer)(nil).Update), user)
}
