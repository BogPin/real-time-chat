// Code generated by MockGen. DO NOT EDIT.
// Source: services/users.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/BogPin/real-time-chat/backend/api/models"
	utils "github.com/BogPin/real-time-chat/backend/api/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIUserService) Delete(userId int, user models.User) (*models.User, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserServiceMockRecorder) Delete(userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserService)(nil).Delete), userId, user)
}

// GetOne mocks base method.
func (m *MockIUserService) GetOne(userId int) (*models.User, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIUserServiceMockRecorder) GetOne(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIUserService)(nil).GetOne), userId)
}

// Update mocks base method.
func (m *MockIUserService) Update(userId int, user models.User) (*models.User, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUserServiceMockRecorder) Update(userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserService)(nil).Update), userId, user)
}
