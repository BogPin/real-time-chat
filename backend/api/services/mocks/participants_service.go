// Code generated by MockGen. DO NOT EDIT.
// Source: services/participants.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/BogPin/real-time-chat/backend/api/models"
	utils "github.com/BogPin/real-time-chat/backend/api/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockIParticipantService is a mock of IParticipantService interface.
type MockIParticipantService struct {
	ctrl     *gomock.Controller
	recorder *MockIParticipantServiceMockRecorder
}

// MockIParticipantServiceMockRecorder is the mock recorder for MockIParticipantService.
type MockIParticipantServiceMockRecorder struct {
	mock *MockIParticipantService
}

// NewMockIParticipantService creates a new mock instance.
func NewMockIParticipantService(ctrl *gomock.Controller) *MockIParticipantService {
	mock := &MockIParticipantService{ctrl: ctrl}
	mock.recorder = &MockIParticipantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParticipantService) EXPECT() *MockIParticipantServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIParticipantService) Create(userId int, participant models.Participant) (*models.Participant, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, participant)
	ret0, _ := ret[0].(*models.Participant)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIParticipantServiceMockRecorder) Create(userId, participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIParticipantService)(nil).Create), userId, participant)
}

// Delete mocks base method.
func (m *MockIParticipantService) Delete(userId int, participant models.Participant) (*models.Participant, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, participant)
	ret0, _ := ret[0].(*models.Participant)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIParticipantServiceMockRecorder) Delete(userId, participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIParticipantService)(nil).Delete), userId, participant)
}

// GetChatUsers mocks base method.
func (m *MockIParticipantService) GetChatUsers(userId, chatId int) ([]models.ChatUser, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatUsers", userId, chatId)
	ret0, _ := ret[0].([]models.ChatUser)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// GetChatUsers indicates an expected call of GetChatUsers.
func (mr *MockIParticipantServiceMockRecorder) GetChatUsers(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatUsers", reflect.TypeOf((*MockIParticipantService)(nil).GetChatUsers), userId, chatId)
}

// Update mocks base method.
func (m *MockIParticipantService) Update(userId int, participant models.Participant) (*models.Participant, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, participant)
	ret0, _ := ret[0].(*models.Participant)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIParticipantServiceMockRecorder) Update(userId, participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIParticipantService)(nil).Update), userId, participant)
}

// UserInChat mocks base method.
func (m *MockIParticipantService) UserInChat(userId, chatId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInChat", userId, chatId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInChat indicates an expected call of UserInChat.
func (mr *MockIParticipantServiceMockRecorder) UserInChat(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInChat", reflect.TypeOf((*MockIParticipantService)(nil).UserInChat), userId, chatId)
}
