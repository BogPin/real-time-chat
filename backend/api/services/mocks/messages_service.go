// Code generated by MockGen. DO NOT EDIT.
// Source: services/messages.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/BogPin/real-time-chat/backend/api/models"
	utils "github.com/BogPin/real-time-chat/backend/api/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockIMessageService is a mock of IMessageService interface.
type MockIMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageServiceMockRecorder
}

// MockIMessageServiceMockRecorder is the mock recorder for MockIMessageService.
type MockIMessageServiceMockRecorder struct {
	mock *MockIMessageService
}

// NewMockIMessageService creates a new mock instance.
func NewMockIMessageService(ctrl *gomock.Controller) *MockIMessageService {
	mock := &MockIMessageService{ctrl: ctrl}
	mock.recorder = &MockIMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageService) EXPECT() *MockIMessageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIMessageService) Create(userId int, MessageTDO models.MessageFromRequest) (*models.Message, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, MessageTDO)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIMessageServiceMockRecorder) Create(userId, MessageTDO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIMessageService)(nil).Create), userId, MessageTDO)
}

// Delete mocks base method.
func (m *MockIMessageService) Delete(userId int, message models.Message) (*models.Message, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, message)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIMessageServiceMockRecorder) Delete(userId, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIMessageService)(nil).Delete), userId, message)
}

// GetChatMessages mocks base method.
func (m *MockIMessageService) GetChatMessages(userId, chatId, page int) ([]models.Message, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", userId, chatId, page)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockIMessageServiceMockRecorder) GetChatMessages(userId, chatId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockIMessageService)(nil).GetChatMessages), userId, chatId, page)
}

// GetOne mocks base method.
func (m *MockIMessageService) GetOne(userId, messageId int) (*models.Message, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", userId, messageId)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIMessageServiceMockRecorder) GetOne(userId, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIMessageService)(nil).GetOne), userId, messageId)
}

// Update mocks base method.
func (m *MockIMessageService) Update(userId int, message models.Message) (*models.Message, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, message)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIMessageServiceMockRecorder) Update(userId, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIMessageService)(nil).Update), userId, message)
}
