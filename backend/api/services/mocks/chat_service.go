// Code generated by MockGen. DO NOT EDIT.
// Source: services/chats.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/BogPin/real-time-chat/backend/api/models"
	utils "github.com/BogPin/real-time-chat/backend/api/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockIChatService is a mock of IChatService interface.
type MockIChatService struct {
	ctrl     *gomock.Controller
	recorder *MockIChatServiceMockRecorder
}

// MockIChatServiceMockRecorder is the mock recorder for MockIChatService.
type MockIChatServiceMockRecorder struct {
	mock *MockIChatService
}

// NewMockIChatService creates a new mock instance.
func NewMockIChatService(ctrl *gomock.Controller) *MockIChatService {
	mock := &MockIChatService{ctrl: ctrl}
	mock.recorder = &MockIChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatService) EXPECT() *MockIChatServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIChatService) Create(userId int, chat models.ChatFromRequest) (*models.Chat, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, chat)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIChatServiceMockRecorder) Create(userId, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIChatService)(nil).Create), userId, chat)
}

// Delete mocks base method.
func (m *MockIChatService) Delete(userId, chatId int) (*models.Chat, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, chatId)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIChatServiceMockRecorder) Delete(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIChatService)(nil).Delete), userId, chatId)
}

// GetOne mocks base method.
func (m *MockIChatService) GetOne(userId, chatId int) (*models.Chat, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", userId, chatId)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockIChatServiceMockRecorder) GetOne(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIChatService)(nil).GetOne), userId, chatId)
}

// GetUserChats mocks base method.
func (m *MockIChatService) GetUserChats(userId int) ([]models.Chat, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", userId)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockIChatServiceMockRecorder) GetUserChats(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockIChatService)(nil).GetUserChats), userId)
}

// Update mocks base method.
func (m *MockIChatService) Update(userId int, chat models.Chat) (*models.Chat, utils.HttpError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, chat)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(utils.HttpError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIChatServiceMockRecorder) Update(userId, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIChatService)(nil).Update), userId, chat)
}
